/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedMeRouteImport } from './routes/_authenticated/me'
import { Route as AuthenticatedMeIndexRouteImport } from './routes/_authenticated/me/index'
import { Route as AuthenticatedMeSettingsIndexRouteImport } from './routes/_authenticated/me/settings/index'
import { Route as AuthenticatedMeRepositoriesIndexRouteImport } from './routes/_authenticated/me/repositories/index'
import { Route as AuthenticatedMeLogoutIndexRouteImport } from './routes/_authenticated/me/logout/index'
import { Route as AuthenticatedMeIssuesIndexRouteImport } from './routes/_authenticated/me/issues/index'
import { Route as AuthenticatedMeHelpIndexRouteImport } from './routes/_authenticated/me/help/index'
import { Route as AuthenticatedMeDashboardsIndexRouteImport } from './routes/_authenticated/me/dashboards/index'
import { Route as AuthenticatedMeRepositoriesInstallIndexRouteImport } from './routes/_authenticated/me/repositories/install/index'
import { Route as AuthenticatedMeRepositoriesExploreIndexRouteImport } from './routes/_authenticated/me/repositories/explore/index'
import { Route as AuthenticatedMeIssuesIssueIndexRouteImport } from './routes/_authenticated/me/issues/$issue/index'
import { Route as AuthenticatedDashboardDashboardPathPagePathIndexRouteImport } from './routes/_authenticated/dashboard/$dashboardPath/$pagePath/index'
import { Route as AuthenticatedMeRepositoriesExploreRepositoryIndexRouteImport } from './routes/_authenticated/me/repositories/explore/$repository/index'
import { Route as AuthenticatedDashboardDashboardPathPagePathEditIndexRouteImport } from './routes/_authenticated/dashboard/$dashboardPath/$pagePath/edit/index'

const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedMeRoute = AuthenticatedMeRouteImport.update({
  id: '/me',
  path: '/me',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedMeIndexRoute = AuthenticatedMeIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedMeRoute,
} as any)
const AuthenticatedMeSettingsIndexRoute =
  AuthenticatedMeSettingsIndexRouteImport.update({
    id: '/settings/',
    path: '/settings/',
    getParentRoute: () => AuthenticatedMeRoute,
  } as any)
const AuthenticatedMeRepositoriesIndexRoute =
  AuthenticatedMeRepositoriesIndexRouteImport.update({
    id: '/repositories/',
    path: '/repositories/',
    getParentRoute: () => AuthenticatedMeRoute,
  } as any)
const AuthenticatedMeLogoutIndexRoute =
  AuthenticatedMeLogoutIndexRouteImport.update({
    id: '/logout/',
    path: '/logout/',
    getParentRoute: () => AuthenticatedMeRoute,
  } as any)
const AuthenticatedMeIssuesIndexRoute =
  AuthenticatedMeIssuesIndexRouteImport.update({
    id: '/issues/',
    path: '/issues/',
    getParentRoute: () => AuthenticatedMeRoute,
  } as any)
const AuthenticatedMeHelpIndexRoute =
  AuthenticatedMeHelpIndexRouteImport.update({
    id: '/help/',
    path: '/help/',
    getParentRoute: () => AuthenticatedMeRoute,
  } as any)
const AuthenticatedMeDashboardsIndexRoute =
  AuthenticatedMeDashboardsIndexRouteImport.update({
    id: '/dashboards/',
    path: '/dashboards/',
    getParentRoute: () => AuthenticatedMeRoute,
  } as any)
const AuthenticatedMeRepositoriesInstallIndexRoute =
  AuthenticatedMeRepositoriesInstallIndexRouteImport.update({
    id: '/repositories/install/',
    path: '/repositories/install/',
    getParentRoute: () => AuthenticatedMeRoute,
  } as any)
const AuthenticatedMeRepositoriesExploreIndexRoute =
  AuthenticatedMeRepositoriesExploreIndexRouteImport.update({
    id: '/repositories/explore/',
    path: '/repositories/explore/',
    getParentRoute: () => AuthenticatedMeRoute,
  } as any)
const AuthenticatedMeIssuesIssueIndexRoute =
  AuthenticatedMeIssuesIssueIndexRouteImport.update({
    id: '/issues/$issue/',
    path: '/issues/$issue/',
    getParentRoute: () => AuthenticatedMeRoute,
  } as any)
const AuthenticatedDashboardDashboardPathPagePathIndexRoute =
  AuthenticatedDashboardDashboardPathPagePathIndexRouteImport.update({
    id: '/dashboard/$dashboardPath/$pagePath/',
    path: '/dashboard/$dashboardPath/$pagePath/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedMeRepositoriesExploreRepositoryIndexRoute =
  AuthenticatedMeRepositoriesExploreRepositoryIndexRouteImport.update({
    id: '/repositories/explore/$repository/',
    path: '/repositories/explore/$repository/',
    getParentRoute: () => AuthenticatedMeRoute,
  } as any)
const AuthenticatedDashboardDashboardPathPagePathEditIndexRoute =
  AuthenticatedDashboardDashboardPathPagePathEditIndexRouteImport.update({
    id: '/dashboard/$dashboardPath/$pagePath/edit/',
    path: '/dashboard/$dashboardPath/$pagePath/edit/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/me': typeof AuthenticatedMeRouteWithChildren
  '/me/': typeof AuthenticatedMeIndexRoute
  '/me/dashboards': typeof AuthenticatedMeDashboardsIndexRoute
  '/me/help': typeof AuthenticatedMeHelpIndexRoute
  '/me/issues': typeof AuthenticatedMeIssuesIndexRoute
  '/me/logout': typeof AuthenticatedMeLogoutIndexRoute
  '/me/repositories': typeof AuthenticatedMeRepositoriesIndexRoute
  '/me/settings': typeof AuthenticatedMeSettingsIndexRoute
  '/dashboard/$dashboardPath/$pagePath': typeof AuthenticatedDashboardDashboardPathPagePathIndexRoute
  '/me/issues/$issue': typeof AuthenticatedMeIssuesIssueIndexRoute
  '/me/repositories/explore': typeof AuthenticatedMeRepositoriesExploreIndexRoute
  '/me/repositories/install': typeof AuthenticatedMeRepositoriesInstallIndexRoute
  '/dashboard/$dashboardPath/$pagePath/edit': typeof AuthenticatedDashboardDashboardPathPagePathEditIndexRoute
  '/me/repositories/explore/$repository': typeof AuthenticatedMeRepositoriesExploreRepositoryIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/me': typeof AuthenticatedMeIndexRoute
  '/me/dashboards': typeof AuthenticatedMeDashboardsIndexRoute
  '/me/help': typeof AuthenticatedMeHelpIndexRoute
  '/me/issues': typeof AuthenticatedMeIssuesIndexRoute
  '/me/logout': typeof AuthenticatedMeLogoutIndexRoute
  '/me/repositories': typeof AuthenticatedMeRepositoriesIndexRoute
  '/me/settings': typeof AuthenticatedMeSettingsIndexRoute
  '/dashboard/$dashboardPath/$pagePath': typeof AuthenticatedDashboardDashboardPathPagePathIndexRoute
  '/me/issues/$issue': typeof AuthenticatedMeIssuesIssueIndexRoute
  '/me/repositories/explore': typeof AuthenticatedMeRepositoriesExploreIndexRoute
  '/me/repositories/install': typeof AuthenticatedMeRepositoriesInstallIndexRoute
  '/dashboard/$dashboardPath/$pagePath/edit': typeof AuthenticatedDashboardDashboardPathPagePathEditIndexRoute
  '/me/repositories/explore/$repository': typeof AuthenticatedMeRepositoriesExploreRepositoryIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_authenticated/me': typeof AuthenticatedMeRouteWithChildren
  '/_authenticated/me/': typeof AuthenticatedMeIndexRoute
  '/_authenticated/me/dashboards/': typeof AuthenticatedMeDashboardsIndexRoute
  '/_authenticated/me/help/': typeof AuthenticatedMeHelpIndexRoute
  '/_authenticated/me/issues/': typeof AuthenticatedMeIssuesIndexRoute
  '/_authenticated/me/logout/': typeof AuthenticatedMeLogoutIndexRoute
  '/_authenticated/me/repositories/': typeof AuthenticatedMeRepositoriesIndexRoute
  '/_authenticated/me/settings/': typeof AuthenticatedMeSettingsIndexRoute
  '/_authenticated/dashboard/$dashboardPath/$pagePath/': typeof AuthenticatedDashboardDashboardPathPagePathIndexRoute
  '/_authenticated/me/issues/$issue/': typeof AuthenticatedMeIssuesIssueIndexRoute
  '/_authenticated/me/repositories/explore/': typeof AuthenticatedMeRepositoriesExploreIndexRoute
  '/_authenticated/me/repositories/install/': typeof AuthenticatedMeRepositoriesInstallIndexRoute
  '/_authenticated/dashboard/$dashboardPath/$pagePath/edit/': typeof AuthenticatedDashboardDashboardPathPagePathEditIndexRoute
  '/_authenticated/me/repositories/explore/$repository/': typeof AuthenticatedMeRepositoriesExploreRepositoryIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/me'
    | '/me/'
    | '/me/dashboards'
    | '/me/help'
    | '/me/issues'
    | '/me/logout'
    | '/me/repositories'
    | '/me/settings'
    | '/dashboard/$dashboardPath/$pagePath'
    | '/me/issues/$issue'
    | '/me/repositories/explore'
    | '/me/repositories/install'
    | '/dashboard/$dashboardPath/$pagePath/edit'
    | '/me/repositories/explore/$repository'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/me'
    | '/me/dashboards'
    | '/me/help'
    | '/me/issues'
    | '/me/logout'
    | '/me/repositories'
    | '/me/settings'
    | '/dashboard/$dashboardPath/$pagePath'
    | '/me/issues/$issue'
    | '/me/repositories/explore'
    | '/me/repositories/install'
    | '/dashboard/$dashboardPath/$pagePath/edit'
    | '/me/repositories/explore/$repository'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_authenticated/me'
    | '/_authenticated/me/'
    | '/_authenticated/me/dashboards/'
    | '/_authenticated/me/help/'
    | '/_authenticated/me/issues/'
    | '/_authenticated/me/logout/'
    | '/_authenticated/me/repositories/'
    | '/_authenticated/me/settings/'
    | '/_authenticated/dashboard/$dashboardPath/$pagePath/'
    | '/_authenticated/me/issues/$issue/'
    | '/_authenticated/me/repositories/explore/'
    | '/_authenticated/me/repositories/install/'
    | '/_authenticated/dashboard/$dashboardPath/$pagePath/edit/'
    | '/_authenticated/me/repositories/explore/$repository/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/me': {
      id: '/_authenticated/me'
      path: '/me'
      fullPath: '/me'
      preLoaderRoute: typeof AuthenticatedMeRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/me/': {
      id: '/_authenticated/me/'
      path: '/'
      fullPath: '/me/'
      preLoaderRoute: typeof AuthenticatedMeIndexRouteImport
      parentRoute: typeof AuthenticatedMeRoute
    }
    '/_authenticated/me/settings/': {
      id: '/_authenticated/me/settings/'
      path: '/settings'
      fullPath: '/me/settings'
      preLoaderRoute: typeof AuthenticatedMeSettingsIndexRouteImport
      parentRoute: typeof AuthenticatedMeRoute
    }
    '/_authenticated/me/repositories/': {
      id: '/_authenticated/me/repositories/'
      path: '/repositories'
      fullPath: '/me/repositories'
      preLoaderRoute: typeof AuthenticatedMeRepositoriesIndexRouteImport
      parentRoute: typeof AuthenticatedMeRoute
    }
    '/_authenticated/me/logout/': {
      id: '/_authenticated/me/logout/'
      path: '/logout'
      fullPath: '/me/logout'
      preLoaderRoute: typeof AuthenticatedMeLogoutIndexRouteImport
      parentRoute: typeof AuthenticatedMeRoute
    }
    '/_authenticated/me/issues/': {
      id: '/_authenticated/me/issues/'
      path: '/issues'
      fullPath: '/me/issues'
      preLoaderRoute: typeof AuthenticatedMeIssuesIndexRouteImport
      parentRoute: typeof AuthenticatedMeRoute
    }
    '/_authenticated/me/help/': {
      id: '/_authenticated/me/help/'
      path: '/help'
      fullPath: '/me/help'
      preLoaderRoute: typeof AuthenticatedMeHelpIndexRouteImport
      parentRoute: typeof AuthenticatedMeRoute
    }
    '/_authenticated/me/dashboards/': {
      id: '/_authenticated/me/dashboards/'
      path: '/dashboards'
      fullPath: '/me/dashboards'
      preLoaderRoute: typeof AuthenticatedMeDashboardsIndexRouteImport
      parentRoute: typeof AuthenticatedMeRoute
    }
    '/_authenticated/me/repositories/install/': {
      id: '/_authenticated/me/repositories/install/'
      path: '/repositories/install'
      fullPath: '/me/repositories/install'
      preLoaderRoute: typeof AuthenticatedMeRepositoriesInstallIndexRouteImport
      parentRoute: typeof AuthenticatedMeRoute
    }
    '/_authenticated/me/repositories/explore/': {
      id: '/_authenticated/me/repositories/explore/'
      path: '/repositories/explore'
      fullPath: '/me/repositories/explore'
      preLoaderRoute: typeof AuthenticatedMeRepositoriesExploreIndexRouteImport
      parentRoute: typeof AuthenticatedMeRoute
    }
    '/_authenticated/me/issues/$issue/': {
      id: '/_authenticated/me/issues/$issue/'
      path: '/issues/$issue'
      fullPath: '/me/issues/$issue'
      preLoaderRoute: typeof AuthenticatedMeIssuesIssueIndexRouteImport
      parentRoute: typeof AuthenticatedMeRoute
    }
    '/_authenticated/dashboard/$dashboardPath/$pagePath/': {
      id: '/_authenticated/dashboard/$dashboardPath/$pagePath/'
      path: '/dashboard/$dashboardPath/$pagePath'
      fullPath: '/dashboard/$dashboardPath/$pagePath'
      preLoaderRoute: typeof AuthenticatedDashboardDashboardPathPagePathIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/me/repositories/explore/$repository/': {
      id: '/_authenticated/me/repositories/explore/$repository/'
      path: '/repositories/explore/$repository'
      fullPath: '/me/repositories/explore/$repository'
      preLoaderRoute: typeof AuthenticatedMeRepositoriesExploreRepositoryIndexRouteImport
      parentRoute: typeof AuthenticatedMeRoute
    }
    '/_authenticated/dashboard/$dashboardPath/$pagePath/edit/': {
      id: '/_authenticated/dashboard/$dashboardPath/$pagePath/edit/'
      path: '/dashboard/$dashboardPath/$pagePath/edit'
      fullPath: '/dashboard/$dashboardPath/$pagePath/edit'
      preLoaderRoute: typeof AuthenticatedDashboardDashboardPathPagePathEditIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedMeRouteChildren {
  AuthenticatedMeIndexRoute: typeof AuthenticatedMeIndexRoute
  AuthenticatedMeDashboardsIndexRoute: typeof AuthenticatedMeDashboardsIndexRoute
  AuthenticatedMeHelpIndexRoute: typeof AuthenticatedMeHelpIndexRoute
  AuthenticatedMeIssuesIndexRoute: typeof AuthenticatedMeIssuesIndexRoute
  AuthenticatedMeLogoutIndexRoute: typeof AuthenticatedMeLogoutIndexRoute
  AuthenticatedMeRepositoriesIndexRoute: typeof AuthenticatedMeRepositoriesIndexRoute
  AuthenticatedMeSettingsIndexRoute: typeof AuthenticatedMeSettingsIndexRoute
  AuthenticatedMeIssuesIssueIndexRoute: typeof AuthenticatedMeIssuesIssueIndexRoute
  AuthenticatedMeRepositoriesExploreIndexRoute: typeof AuthenticatedMeRepositoriesExploreIndexRoute
  AuthenticatedMeRepositoriesInstallIndexRoute: typeof AuthenticatedMeRepositoriesInstallIndexRoute
  AuthenticatedMeRepositoriesExploreRepositoryIndexRoute: typeof AuthenticatedMeRepositoriesExploreRepositoryIndexRoute
}

const AuthenticatedMeRouteChildren: AuthenticatedMeRouteChildren = {
  AuthenticatedMeIndexRoute: AuthenticatedMeIndexRoute,
  AuthenticatedMeDashboardsIndexRoute: AuthenticatedMeDashboardsIndexRoute,
  AuthenticatedMeHelpIndexRoute: AuthenticatedMeHelpIndexRoute,
  AuthenticatedMeIssuesIndexRoute: AuthenticatedMeIssuesIndexRoute,
  AuthenticatedMeLogoutIndexRoute: AuthenticatedMeLogoutIndexRoute,
  AuthenticatedMeRepositoriesIndexRoute: AuthenticatedMeRepositoriesIndexRoute,
  AuthenticatedMeSettingsIndexRoute: AuthenticatedMeSettingsIndexRoute,
  AuthenticatedMeIssuesIssueIndexRoute: AuthenticatedMeIssuesIssueIndexRoute,
  AuthenticatedMeRepositoriesExploreIndexRoute:
    AuthenticatedMeRepositoriesExploreIndexRoute,
  AuthenticatedMeRepositoriesInstallIndexRoute:
    AuthenticatedMeRepositoriesInstallIndexRoute,
  AuthenticatedMeRepositoriesExploreRepositoryIndexRoute:
    AuthenticatedMeRepositoriesExploreRepositoryIndexRoute,
}

const AuthenticatedMeRouteWithChildren = AuthenticatedMeRoute._addFileChildren(
  AuthenticatedMeRouteChildren,
)

interface AuthenticatedRouteChildren {
  AuthenticatedMeRoute: typeof AuthenticatedMeRouteWithChildren
  AuthenticatedDashboardDashboardPathPagePathIndexRoute: typeof AuthenticatedDashboardDashboardPathPagePathIndexRoute
  AuthenticatedDashboardDashboardPathPagePathEditIndexRoute: typeof AuthenticatedDashboardDashboardPathPagePathEditIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedMeRoute: AuthenticatedMeRouteWithChildren,
  AuthenticatedDashboardDashboardPathPagePathIndexRoute:
    AuthenticatedDashboardDashboardPathPagePathIndexRoute,
  AuthenticatedDashboardDashboardPathPagePathEditIndexRoute:
    AuthenticatedDashboardDashboardPathPagePathEditIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
